name: CI

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8']
    steps:
    - uses: actions/checkout@v2

    - name: set up python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: install rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rustfmt, clippy

    - name: install python dependencies
      run: make install

    - name: build
      run: make build

    - name: lint
      run: make lint

    - name: mypy
      run: make mypy

    - name: test
      run: |
        make test
        coverage xml
        ls -alh

    - name: install go
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x

    - name: run toml-test
      run: |
        go get github.com/BurntSushi/toml-test
        ~/go/bin/toml-test ./tests/toml_test.py

    - uses: codecov/codecov-action@v1.0.5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml

  build:
    name: build py${{ matrix.python-version || '3.7' }} on ${{ matrix.platform || matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu
        - macos
        - windows
        target:
        - 'cp37-*'
        - 'cp38-*'
        include:
        - os: ubuntu
          platform: linux
        - target: 'cp38-*'
          python-version: 3.8
        - os: windows
          ls: dir

    runs-on: ${{ format('{0}-latest', matrix.os) }}
    steps:
    - uses: actions/checkout@v2

    - name: set up python ${{ matrix.python-version || '3.7' }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version || '3.7' }}

    - name: set up rust
      if: matrix.target != 'sdist' && matrix.os != 'ubuntu'
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true

    - name: install python dependencies
      run: |
        pip install -U pip setuptools setuptools-rust wheel twine
        pip install 'git+https://github.com/samuelcolvin/cibuildwheel.git@github-actions#egg=cibuildwheel'

    - name: build sdist
      if: matrix.os == 'ubuntu' && matrix.target == 'cp37-*'
      run: python setup.py sdist

    - name: build ${{ matrix.platform || matrix.os }} binaries
      if: matrix.target != 'sdist'
      run: cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: ${{ matrix.target }}
        CIBW_PLATFORM: ${{ matrix.platform || matrix.os }}
        CIBW_BEFORE_BUILD_MACOS: 'pip install -U setuptools-rust'
        CIBW_BEFORE_BUILD_LINUX: >
          pip install -U setuptools-rust &&
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=nightly --profile=minimal -y
        # pip install -U setuptools-rust isn't required on windows
        CIBW_BEFORE_BUILD_WINDOWS: 'rustup default nightly'
        CIBW_TEST_COMMAND: 'python -c "import rtoml; print(rtoml.VERSION)"'
        CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
        CIBW_ENVIRONMENT_WINDOWS: 'PATH="$HOME\.cargo\bin:$PATH"'

    - name: list dist files
      run: ${{ matrix.ls || 'ls -lh' }} dist/

    - name: twine check
      run: twine check dist/*

    - name: upload to pypi
      if: startsWith(github.ref, 'refs/tags/')
      run: twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi_token }}
