name: CI

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8']
    steps:
    - uses: actions/checkout@v2

    - name: set up python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: install rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rustfmt, clippy

    - name: install python dependencies
      run: make install

    - name: build
      run: make build

    - name: lint
      run: make lint

    - name: mypy
      run: make mypy

    - name: test
      run: |
        make test
        coverage xml
        ls -alh

    - name: install go
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x

    - name: run toml-test
      run: |
        go get github.com/BurntSushi/toml-test
        ~/go/bin/toml-test ./tests/toml_test.py

    - uses: codecov/codecov-action@v1.0.5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml

  build:
#    needs: test
#    if: success() && startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu
        - macos
        - windows
        target:
        - 'cp37-*'
        - 'cp38-*'
        - 'sdist'
        exclude:
        - os: macos
          target: sdist
        - os: windows
          target: sdist

    runs-on: ${{ format('{0}-latest', matrix.os) }}
    steps:
    - uses: actions/checkout@v2

    - name: set up python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: set up rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true

    - run: rustc --version

    - name: install python dependencies
      run: |
        pip install -U pip setuptools setuptools-rust wheel twine
        pip install 'git+https://github.com/samuelcolvin/cibuildwheel.git@github-actions#egg=cibuildwheel'

    - name: build sdist
      if: matrix.target == 'sdist'
      run: python setup.py sdist

    - name: build binaries for linux
      if: matrix.target != 'sdist' && matrix.os == 'linux'
      run: cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: ${{ matrix.target }}
        CIBW_PLATFORM: linux
        CIBW_TEST_COMMAND: 'python -c "import rtoml"'
        CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'

    - name: build binaries for macos
      if: matrix.os == 'macos'
      run: cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: ${{ matrix.target }}
        CIBW_PLATFORM: macos
        CIBW_TEST_COMMAND: 'python -c "import rtoml"'
        CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'

    - name: build binaries for windows
      if: matrix.os == 'windows'
      run: cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: ${{ matrix.target }}
        CIBW_PLATFORM: windows
        CIBW_TEST_COMMAND: 'python -c "import rtoml"'
        CIBW_ENVIRONMENT: 'PATH="$HOME\.cargo\bin:$PATH"'

    - name: upload to pypi
      run: |
        ls -l -h dist/
        twine check dist/*
#        twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi_token }}
