name: CI

on:
  push:
    branches:
      - master
    tags:
      - '**'
  pull_request: {}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8']
    steps:
    - uses: actions/checkout@v2

    - name: set up python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: install rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rustfmt, clippy

    - name: install python dependencies
      run: make install

    - name: build
      run: make build

    - name: lint
      run: make lint

    - name: mypy
      run: make mypy

    - name: test
      run: |
        make test
        coverage xml
        ls -alh

    - name: install go
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x

    - name: run toml-test
      run: |
        go get github.com/BurntSushi/toml-test
        # these examples are now valid
        rm `find ~/go/src/github.com/BurntSushi/toml-test/tests/invalid -name "array-mixed*"`
        ~/go/bin/toml-test ./tests/toml_test.py

    - uses: codecov/codecov-action@v1.0.5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml

  build:
    name: build py3.${{ matrix.python-version }} on ${{ matrix.platform || matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu
        - macos
        - windows
        python-version:
        - '7'
        - '8'
        include:
        - os: ubuntu
          platform: linux
        - os: windows
          ls: dir

    runs-on: ${{ format('{0}-latest', matrix.os) }}
    steps:
    - uses: actions/checkout@v2

    - name: set up python
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: set up rust
      if: matrix.os != 'ubuntu'
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true

    - name: install python dependencies
      run: |
        pip install -U setuptools wheel
        pip install 'git+https://github.com/joerick/cibuildwheel.git@refs/pull/194/head'

    - name: build sdist
      if: matrix.os == 'ubuntu' && matrix.python-version == '7'
      run: |
        pip install -U setuptools-rust
        python setup.py sdist

    - name: build ${{ matrix.platform || matrix.os }} binaries
      run: cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: 'cp3${{ matrix.python-version }}-*'
        CIBW_SKIP: '*-win32'
        CIBW_PLATFORM: ${{ matrix.platform || matrix.os }}
        CIBW_TEST_REQUIRES: 'pytest'
        CIBW_TEST_COMMAND: 'pytest {project}/tests -s'
        CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
        CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
        CIBW_BEFORE_BUILD: >
          pip install -U setuptools-rust &&
          rustup default nightly &&
          rustup show
        CIBW_BEFORE_BUILD_LINUX: >
          pip install -U setuptools-rust &&
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=nightly --profile=minimal -y &&
          rustup show

    - name: build windows 32bit binaries
      if: matrix.os == 'windows'
      run: cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: 'cp3${{ matrix.python-version }}-win32'
        CIBW_PLATFORM: windows
        CIBW_TEST_REQUIRES: 'pytest'
        CIBW_TEST_COMMAND: 'pytest {project}/tests -s'
        CIBW_ENVIRONMENT: 'PATH="$UserProfile\.cargo\bin;$PATH"'
        CIBW_BEFORE_BUILD: >
          pip install -U setuptools-rust &&
          rustup toolchain install nightly-i686-pc-windows-msvc &&
          rustup default nightly-i686-pc-windows-msvc &&
          rustup override set nightly-i686-pc-windows-msvc &&
          rustup show

    - name: list dist files
      run: ${{ matrix.ls || 'ls -lh' }} dist/

    - name: twine check
      run: |
        pip install -U twine
        twine check dist/*

    - name: upload to pypi
      if: startsWith(github.ref, 'refs/tags/')
      run: twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi_token }}
